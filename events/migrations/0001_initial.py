# Generated by Django 5.0.8 on 2024-10-15 11:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('date', models.DateTimeField(verbose_name='date of event')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description (Optional)')),
                ('servings_per_order', models.PositiveIntegerField(default=8, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Servings per order (Cannot be changed later)')),
                ('private', models.BooleanField(default=True)),
                ('locked', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z\\- ]*$', 'Only alphanumeric characters, hyphens and spaces are allowed.')])),
                ('description', models.CharField(max_length=200)),
                ('logo', models.ImageField(upload_to='logos')),
                ('path', models.SlugField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Serving',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyer_name', models.CharField(max_length=50, verbose_name='Name')),
                ('buyer_whatsapp', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='WhatsApp')),
                ('number_of_servings', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),
        migrations.CreateModel(
            name='OrgUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, verbose_name='Phone/WhatsApp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchaser_name', models.CharField(max_length=50, verbose_name='Name')),
                ('purchaser_whatsapp', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='WhatsApp')),
                ('purchaser_revolut', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', 'Only alphanumeric characters are allowed.')], verbose_name='Revolut username')),
                ('description', models.CharField(max_length=100, verbose_name='Food description (e.g. Pizza type)')),
                ('price_per_serving', models.DecimalField(decimal_places=2, max_digits=4)),
                ('available_servings', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Servings available to be claimed by other users')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
            ],
        ),
        migrations.AddConstraint(
            model_name='organisation',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='unique_organisation_name', violation_error_message='Organisation name already exists.'),
        ),
        migrations.AddField(
            model_name='event',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.organisation'),
        ),
        migrations.AddField(
            model_name='orguser',
            name='organisation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.organisation'),
        ),
        migrations.AddField(
            model_name='serving',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.order'),
        ),
    ]
